{"version":3,"file":"307.bundle.js","mappings":"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","sources":["webpack://aleo-website/./src/workers/worker.js"],"sourcesContent":["import * as aleo from \"@aleohq/sdk\";\n\nawait aleo.initializeWasm();\nawait aleo.initThreadPool(10);\n\nconst defaultHost = \"https://vm.aleo.org/api\";\nconst keyProvider = new aleo.AleoKeyProvider();\nconst programManager = new aleo.ProgramManager(defaultHost, keyProvider, undefined);\n\nkeyProvider.useCache(true);\n\nself.postMessage({\n    type: \"ALEO_WORKER_READY\",\n});\n\nlet lastLocalProgram = null;\nself.addEventListener(\"message\", (ev) => {\n    if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_LOCAL\") {\n        const { localProgram, aleoFunction, inputs, privateKey } = ev.data;\n\n        console.log(\"Web worker: Executing function locally...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                // Ensure the program is valid and that it contains the function specified\n                const program = programManager.createProgramFromSource(localProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n\n                // Get the program imports\n                const imports = programManager.networkClient.getProgramImports(localProgram);\n\n                // Get the proving and verifying keys for the function\n                if (lastLocalProgram !== localProgram) {\n                    const keys = programManager.executionEngine.synthesizeKeypair(localProgram, aleoFunction);\n                    programManager.keyProvider.cacheKeys(cacheKey, [keys.provingKey(), keys.verifyingKey()]);\n                    lastLocalProgram = localProgram;\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey});\n\n                // Execute the function locally\n                let response = await programManager.executeOffline(\n                    localProgram,\n                    aleoFunction,\n                    inputs,\n                    imports,\n                    keyParams,\n                    undefined,\n                    undefined,\n                    aleo.PrivateKey.from_string(privateKey)\n                );\n\n                // Return the outputs to the main thread\n                console.log(`Web worker: Local execution completed in ${performance.now() - startTime} ms`);\n                const outputs = response.getOutputs();\n                console.log(`Function execution response: ${outputs}`);\n                self.postMessage({\n                    type: \"OFFLINE_EXECUTION_COMPLETED\",\n                    outputs,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_EXECUTE_PROGRAM_ON_CHAIN\") {\n        const {\n            remoteProgram,\n            aleoFunction,\n            inputs,\n            privateKey,\n            fee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\"Web worker: Creating execution...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                const privateKeyObject = aleo.PrivateKey.from_string(privateKey)\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.hasFunction(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n\n                // Get the proving and verifying keys for the function\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = programManager.executionEngine.synthesizeKeypair(remoteProgram, aleoFunction);\n                    programManager.keyProvider.cacheKeys(cacheKey, [keys.provingKey(), keys.verifyingKey()]);\n                }\n\n                // Pass the cache key to the execute function\n                const keyParams = new aleo.AleoKeyProviderParams({\"cacheKey\": cacheKey})\n\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n                const transaction = await programManager.execute(\n                    program_id,\n                    aleoFunction,\n                    fee,\n                    inputs,\n                    undefined,\n                    keyParams,\n                    feeRecord,\n                    undefined,\n                    undefined,\n                    privateKeyObject\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: On-chain execution transaction created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"EXECUTION_TRANSACTION_COMPLETED\",\n                    executeTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(`Error creating execution transaction: ${error}`);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_EXECUTION_FEE\") {\n        const { remoteProgram, aleoFunction, inputs, url } =\n            ev.data;\n\n        console.log(\"Web worker: Estimating execution fee...\");\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                // Ensure the program is valid and that it contains the function specified\n                const program = await programManager.networkClient.getProgramObject(remoteProgram);\n                const program_id = program.id();\n                if (!program.getFunctions().includes(aleoFunction)) {\n                    throw `Program ${program_id} does not contain function ${aleoFunction}`;\n                }\n                const cacheKey = `${program_id}:${aleoFunction}`;\n                const imports = await programManager.networkClient.getProgramImports(remoteProgram);\n\n                // Get the proving and verifying keys for the function\n                if (!programManager.keyProvider.containsKeys(cacheKey)) {\n                    console.log(`Web worker: Synthesizing proving & verifying keys for: '${program_id}:${aleoFunction}'`);\n                    const keys = programManager.executionEngine.synthesizeKeypair(remoteProgram, aleoFunction);\n                    programManager.keyProvider.cacheKeys(cacheKey, [keys.provingKey(), keys.verifyingKey()]);\n                }\n\n                // Estimate the execution fee\n                const [provingKey, verifyingKey] = programManager.keyProvider.getKeys(cacheKey);\n                let executeFee = await programManager.executionEngine.estimateExecutionFee(\n                    new aleo.PrivateKey(),\n                    remoteProgram,\n                    aleoFunction,\n                    inputs,\n                    url,\n                    false,\n                    imports,\n                    provingKey,\n                    verifyingKey,\n                );\n\n                // Return the execution fee estimate to the main thread\n                console.log(`Web worker: Execution fee estimated in ${performance.now() - startTime} ms`);\n                console.log(`Execution Fee Estimation: ${executeFee} microcrdits`);\n                self.postMessage({\n                    type: \"EXECUTION_FEE_ESTIMATION_COMPLETED\",\n                    executionFee: Number(executeFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_ESTIMATE_DEPLOYMENT_FEE\") {\n        const { program, url } = ev.data;\n\n        console.log(\"Web worker: Estimating deployment fee...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                const imports = await programManager.networkClient.getProgramImports(program);\n                console.log(\"Estimating deployment fee..\");\n                let deploymentFee =\n                    await programManager.executionEngine.estimateDeploymentFee(\n                        program,\n                        false,\n                        imports,\n                    );\n\n                // Return the deployment fee estimate to the main thread\n                console.log(`Web worker: Deployment fee estimation completed in ${performance.now() - startTime} ms`);\n                console.log(`Deployment Fee Estimation: ${deploymentFee} microcredits`);\n                self.postMessage({\n                    type: \"DEPLOYMENT_FEE_ESTIMATION_COMPLETED\",\n                    deploymentFee: Number(deploymentFee) / 1000000 + 0.01,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_TRANSFER\") {\n        const {\n            privateKey,\n            amountCredits,\n            recipient,\n            transfer_type,\n            amountRecord,\n            fee,\n            feeRecord,\n            url,\n        } = ev.data;\n\n        console.log(\n            `Web worker: Creating transfer of type ${transfer_type}...`,\n        );\n        let startTime = performance.now();\n\n        (async function () {\n            try {\n                // Set the host to the provided URL if provided\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the transfer transaction and submit it to the network\n                const transaction = await programManager.transfer(\n                    amountCredits,\n                    recipient,\n                    transfer_type,\n                    fee,\n                    undefined,\n                    amountRecord,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey)\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Transfer transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"TRANSFER_TRANSACTION_COMPLETED\",\n                    transferTransaction: transaction,\n                });\n            } catch (error) {\n                console.error(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_DEPLOY\") {\n        const { program, privateKey, fee, feeRecord, url } = ev.data;\n\n        console.log(\"Web worker: Creating deployment...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Check if the program is valid\n                const programObject = programManager.createProgramFromSource(program);\n\n                // Check if the program already exists on the network. If so, throw an error\n                let programExists = false;\n                try {\n                    await programManager.networkClient.getProgram(programObject.id());\n                    programExists = true;\n                } catch (e) {\n                    console.log(\n                        `Program not found on the Aleo Network - proceeding with deployment...`,\n                    );\n                }\n\n                if (programExists) {\n                    throw `Program ${programObject.id()} already exists on the network`;\n                }\n\n                console.log(\"fee is: \", fee);\n                // Create the deployment transaction and submit it to the network\n                let transaction = await programManager.deploy(\n                    program,\n                    fee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                )\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Deployment transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"DEPLOY_TRANSACTION_COMPLETED\",\n                    deployTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_SPLIT\") {\n        const { splitAmount, record, privateKey, url } = ev.data;\n\n        console.log(\"Web worker: Creating split...\");\n\n        let startTime = performance.now();\n        (async function () {\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the split transaction and submit to the network\n                const transaction = await programManager.split(\n                    splitAmount,\n                    record,\n                    aleo.PrivateKey.from_string(privateKey)\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Split transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"SPLIT_TRANSACTION_COMPLETED\",\n                    splitTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    } else if (ev.data.type === \"ALEO_JOIN\") {\n        const { recordOne, recordTwo, fee, feeRecord, privateKey, url } =\n            ev.data;\n\n        console.log(\"Web worker: Creating join...\");\n\n        let startTime = performance.now();\n        (async function () {\n\n            try {\n                // Set the network client host if specified\n                if (typeof url === \"string\") { programManager.setHost(url); }\n\n                // Create the join transaction and submit it to the network\n                const transaction = await programManager.join(\n                    recordOne,\n                    recordTwo,\n                    fee,\n                    undefined,\n                    feeRecord,\n                    aleo.PrivateKey.from_string(privateKey),\n                );\n\n                // Return the transaction id to the main thread\n                console.log(`Web worker: Join transaction ${transaction} created in ${performance.now() - startTime} ms`);\n                self.postMessage({\n                    type: \"JOIN_TRANSACTION_COMPLETED\",\n                    joinTransaction: transaction,\n                });\n            } catch (error) {\n                console.log(error);\n                self.postMessage({\n                    type: \"ERROR\",\n                    errorMessage: error.toString(),\n                });\n            } finally {\n                programManager.setHost(defaultHost);\n            }\n        })();\n    }\n});\n"],"names":["_regeneratorRuntime","exports","Op","Object","prototype","hasOwn","hasOwnProperty","defineProperty","obj","key","desc","value","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","enumerable","configurable","writable","err","wrap","innerFn","outerFn","self","tryLocsList","protoGenerator","Generator","generator","create","context","Context","makeInvokeMethod","tryCatch","fn","arg","type","call","ContinueSentinel","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","method","_invoke","AsyncIterator","PromiseImpl","invoke","resolve","reject","record","result","_typeof","__await","then","unwrapped","error","previousPromise","callInvokeWithMethodAndArg","state","Error","done","delegate","delegateResult","maybeInvokeDelegate","sent","_sent","dispatchException","abrupt","methodName","undefined","TypeError","info","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","displayName","isGeneratorFunction","genFun","ctor","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","iter","keys","val","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","asyncGeneratorStep","gen","_next","_throw","_asyncToGenerator","args","arguments","apply","aleo","defaultHost","keyProvider","programManager","useCache","postMessage","lastLocalProgram","addEventListener","ev","data","_ev$data","localProgram","aleoFunction","inputs","privateKey","console","log","startTime","performance","now","_callee","program","program_id","cacheKey","imports","keyParams","response","outputs","_context","createProgramFromSource","id","hasFunction","concat","networkClient","getProgramImports","executionEngine","synthesizeKeypair","cacheKeys","provingKey","verifyingKey","executeOffline","from_string","getOutputs","t0","errorMessage","toString","_ev$data2","remoteProgram","fee","feeRecord","url","_callee2","privateKeyObject","transaction","_context2","getProgramObject","containsKeys","setHost","execute","executeTransaction","_ev$data3","_callee3","_programManager$keyPr","_programManager$keyPr2","executeFee","_context3","getFunctions","includes","getKeys","estimateExecutionFee","executionFee","Number","_ev$data4","_callee4","deploymentFee","_context4","estimateDeploymentFee","_ev$data5","amountCredits","recipient","transfer_type","amountRecord","_callee5","_context5","transfer","transferTransaction","_ev$data6","_callee6","programObject","programExists","_context6","getProgram","deploy","deployTransaction","t1","_ev$data7","splitAmount","_callee7","_context7","split","splitTransaction","_ev$data8","recordOne","recordTwo","_callee8","_context8","join","joinTransaction"],"sourceRoot":""}